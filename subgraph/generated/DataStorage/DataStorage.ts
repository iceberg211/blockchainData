// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class DataStored extends ethereum.Event {
  get params(): DataStored__Params {
    return new DataStored__Params(this);
  }
}

export class DataStored__Params {
  _event: DataStored;

  constructor(event: DataStored) {
    this._event = event;
  }

  get recordId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get message(): string {
    return this._event.parameters[4].value.toString();
  }

  get dataHash(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class DataUpdated extends ethereum.Event {
  get params(): DataUpdated__Params {
    return new DataUpdated__Params(this);
  }
}

export class DataUpdated__Params {
  _event: DataUpdated;

  constructor(event: DataUpdated) {
    this._event = event;
  }

  get recordId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get updater(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newMessage(): string {
    return this._event.parameters[2].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class EtherReceived extends ethereum.Event {
  get params(): EtherReceived__Params {
    return new EtherReceived__Params(this);
  }
}

export class EtherReceived__Params {
  _event: EtherReceived;

  constructor(event: EtherReceived) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DataStorage__recordsResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: string;
  value5: BigInt;
  value6: Bytes;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: string,
    value5: BigInt,
    value6: Bytes,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromFixedBytes(this.value6));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getSender(): Address {
    return this.value1;
  }

  getRecipient(): Address {
    return this.value2;
  }

  getAmount(): BigInt {
    return this.value3;
  }

  getMessage(): string {
    return this.value4;
  }

  getTimestamp(): BigInt {
    return this.value5;
  }

  getDataHash(): Bytes {
    return this.value6;
  }
}

export class DataStorage__getRecordResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get sender(): Address {
    return this[1].toAddress();
  }

  get recipient(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get message(): string {
    return this[4].toString();
  }

  get timestamp(): BigInt {
    return this[5].toBigInt();
  }

  get dataHash(): Bytes {
    return this[6].toBytes();
  }
}

export class DataStorage__getRecentRecordsResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get sender(): Address {
    return this[1].toAddress();
  }

  get recipient(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get message(): string {
    return this[4].toString();
  }

  get timestamp(): BigInt {
    return this[5].toBigInt();
  }

  get dataHash(): Bytes {
    return this[6].toBytes();
  }
}

export class DataStorage extends ethereum.SmartContract {
  static bind(address: Address): DataStorage {
    return new DataStorage("DataStorage", address);
  }

  dataHashes(param0: Bytes): boolean {
    let result = super.call("dataHashes", "dataHashes(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return result[0].toBoolean();
  }

  try_dataHashes(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("dataHashes", "dataHashes(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  records(param0: BigInt): DataStorage__recordsResult {
    let result = super.call(
      "records",
      "records(uint256):(uint256,address,address,uint256,string,uint256,bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new DataStorage__recordsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toString(),
      result[5].toBigInt(),
      result[6].toBytes(),
    );
  }

  try_records(param0: BigInt): ethereum.CallResult<DataStorage__recordsResult> {
    let result = super.tryCall(
      "records",
      "records(uint256):(uint256,address,address,uint256,string,uint256,bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DataStorage__recordsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toString(),
        value[5].toBigInt(),
        value[6].toBytes(),
      ),
    );
  }

  userRecords(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "userRecords",
      "userRecords(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_userRecords(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userRecords",
      "userRecords(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRecord(_recordId: BigInt): DataStorage__getRecordResultValue0Struct {
    let result = super.call(
      "getRecord",
      "getRecord(uint256):((uint256,address,address,uint256,string,uint256,bytes32))",
      [ethereum.Value.fromUnsignedBigInt(_recordId)],
    );

    return changetype<DataStorage__getRecordResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getRecord(
    _recordId: BigInt,
  ): ethereum.CallResult<DataStorage__getRecordResultValue0Struct> {
    let result = super.tryCall(
      "getRecord",
      "getRecord(uint256):((uint256,address,address,uint256,string,uint256,bytes32))",
      [ethereum.Value.fromUnsignedBigInt(_recordId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<DataStorage__getRecordResultValue0Struct>(value[0].toTuple()),
    );
  }

  getUserRecords(_user: Address): Array<BigInt> {
    let result = super.call(
      "getUserRecords",
      "getUserRecords(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)],
    );

    return result[0].toBigIntArray();
  }

  try_getUserRecords(_user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserRecords",
      "getUserRecords(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getTotalRecords(): BigInt {
    let result = super.call(
      "getTotalRecords",
      "getTotalRecords():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getTotalRecords(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalRecords",
      "getTotalRecords():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRecentRecords(
    _limit: BigInt,
  ): Array<DataStorage__getRecentRecordsResultValue0Struct> {
    let result = super.call(
      "getRecentRecords",
      "getRecentRecords(uint256):((uint256,address,address,uint256,string,uint256,bytes32)[])",
      [ethereum.Value.fromUnsignedBigInt(_limit)],
    );

    return result[0].toTupleArray<DataStorage__getRecentRecordsResultValue0Struct>();
  }

  try_getRecentRecords(
    _limit: BigInt,
  ): ethereum.CallResult<
    Array<DataStorage__getRecentRecordsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getRecentRecords",
      "getRecentRecords(uint256):((uint256,address,address,uint256,string,uint256,bytes32)[])",
      [ethereum.Value.fromUnsignedBigInt(_limit)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<DataStorage__getRecentRecordsResultValue0Struct>(),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class StoreDataCall extends ethereum.Call {
  get inputs(): StoreDataCall__Inputs {
    return new StoreDataCall__Inputs(this);
  }

  get outputs(): StoreDataCall__Outputs {
    return new StoreDataCall__Outputs(this);
  }
}

export class StoreDataCall__Inputs {
  _call: StoreDataCall;

  constructor(call: StoreDataCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _message(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class StoreDataCall__Outputs {
  _call: StoreDataCall;

  constructor(call: StoreDataCall) {
    this._call = call;
  }
}

export class BatchStoreDataCall extends ethereum.Call {
  get inputs(): BatchStoreDataCall__Inputs {
    return new BatchStoreDataCall__Inputs(this);
  }

  get outputs(): BatchStoreDataCall__Outputs {
    return new BatchStoreDataCall__Outputs(this);
  }
}

export class BatchStoreDataCall__Inputs {
  _call: BatchStoreDataCall;

  constructor(call: BatchStoreDataCall) {
    this._call = call;
  }

  get _recipients(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _messages(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }
}

export class BatchStoreDataCall__Outputs {
  _call: BatchStoreDataCall;

  constructor(call: BatchStoreDataCall) {
    this._call = call;
  }
}

export class UpdateMessageCall extends ethereum.Call {
  get inputs(): UpdateMessageCall__Inputs {
    return new UpdateMessageCall__Inputs(this);
  }

  get outputs(): UpdateMessageCall__Outputs {
    return new UpdateMessageCall__Outputs(this);
  }
}

export class UpdateMessageCall__Inputs {
  _call: UpdateMessageCall;

  constructor(call: UpdateMessageCall) {
    this._call = call;
  }

  get _recordId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newMessage(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateMessageCall__Outputs {
  _call: UpdateMessageCall;

  constructor(call: UpdateMessageCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}
